// orderRouter.js
const express = require("express");
const axios = require("axios");
const fs = require("fs");
const path = require("path");

const router = express.Router();

// === –ó–∞–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–≤–æ–∏–º–∏ ===
const TELEGRAM_TOKEN = "";
const TELEGRAM_CHAT_ID = "";
const PRODUCT_TITLE = "–¢–û–ü+–õ–û–°–ò–ù–ò";

// –î–ª—è CRM
const CRM_URL = ""; // https://...lp-crm.biz/import/api/
const CRM_API_KEY = ""; // –¢–≤–æ–π API-–∫–ª—é—á LP-CRM

router.post("/ok", async (req, res) => {
  const {
    name,
    phone,
    comment,
    email,
    product_id,
    product_name,
    delivery,
    delivery_adress,
  } = req.body;
  const utms = req.session && req.session.utms ? req.session.utms : {};
  const ip = req.headers["x-forwarded-for"] || req.connection.remoteAddress;

  if (!name || !phone) {
    return res.status(400).render("fail", {
      message: "–ü–æ–ª—è '–Ü–º'—è' —Ç–∞ '–¢–µ–ª–µ—Ñ–æ–Ω' –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ!",
    });
  }

  // ‚Äî‚Äî‚Äî LP-CRM –ó–ê–Ø–í–ö–ê ‚Äî‚Äî‚Äî
  if (CRM_URL && CRM_API_KEY) {
    try {
      const productsList = [
        {
          product_id: product_id || "1",
          price: "555",
          count: "1",
          subs: [
            {
              sub_id: product_id || "1",
              count: "1",
            },
          ],
        },
      ];
      const products = encodeURIComponent(JSON.stringify(productsList));
      const sender = encodeURIComponent(JSON.stringify(req.headers));
      const crmData = {
        key: CRM_API_KEY,
        order_id: Math.round(Date.now() * 10),
        country: "UA",
        office: "1",
        products: products,
        bayer_name: name,
        phone,
        email: email || "",
        comment: product_name || comment || "",
        delivery: delivery || "",
        delivery_adress: delivery_adress || "",
        payment: "",
        sender: sender,
        utm_source: utms.utm_source || "",
        utm_medium: utms.utm_medium || "",
        utm_term: utms.utm_term || "",
        utm_content: utms.utm_content || "",
        utm_campaign: utms.utm_campaign || "",
        additional_1: "",
        additional_2: "",
        additional_3: "",
        additional_4: "",
      };

      await axios.post(CRM_URL, new URLSearchParams(crmData).toString(), {
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
      });
      // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç, –º–æ–∂–µ—à—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ
    } catch (e) {
      // –ú–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LP-CRM: ", e.message);
    }
  }

  // ‚Äî‚Äî‚Äî –°–ü–ò–°–û–ö –î–ê–ù–ù–´–• –î–õ–Ø TELEGRAM ‚Äî‚Äî‚Äî
  let arr = {
    "<b>‚Üí –ó–ê–ú–û–í–õ–ï–ù–ù–Ø –ù–ê</b>": req.hostname,
    "üíÅüèª‚Äç‚ôÇÔ∏è –Ü–º º—è: ": name,
    "üì± –¢–µ–ª–µ—Ñ–æ–Ω: ": phone,
    "üì¶ –¢–æ–≤–∞—Ä: ": PRODUCT_TITLE,
    "üõçÔ∏è –ö–æ–ª—ñ—Ä: ": comment || "",
    "üìç IP: ": ip,
    // 'üìå UTM Source: ': utms.utm_source || "",
    // 'üìå UTM Medium: ': utms.utm_medium || "",
    // 'üìå UTM Term: ': utms.utm_term || "",
    // 'üìå UTM Content: ': utms.utm_content || "",
    // 'üìå UTM Campaign: ': utms.utm_campaign || "",
  };

  let txt = "";
  Object.entries(arr).forEach(([key, value]) => {
    txt += `<b>${key}</b> ${value}%0A`;
  });

  // ‚Äî‚Äî‚Äî TELEGRAM –°–û–û–ë–©–ï–ù–ò–ï ‚Äî‚Äî‚Äî
  try {
    await axios.get(
      `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`,
      {
        params: {
          chat_id: TELEGRAM_CHAT_ID,
          parse_mode: "html",
          text: txt,
        },
      }
    );
  } catch (e) {
    // –ú–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–µ, –µ—Å–ª–∏ –Ω–∞–¥–æ
    console.error("–û—à–∏–±–∫–∞ Telegram:", e.message);
  }

  // ‚Äî‚Äî‚Äî –°–û–•–†–ê–ù–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê –í –§–ê–ô–õ (–¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏) ‚Äî‚Äî‚Äî
  const orderData = {
    name,
    phone,
    comment,
    product_id,
    utms,
    ip,
    date: new Date().toISOString(),
  };
  try {
    fs.appendFileSync(
      path.join(__dirname, "/data/orders.txt"),
      JSON.stringify(orderData, null, 2) + ",\n"
    );
  } catch (e) {
    // –æ—à–∏–±–∫—É —Ç—É—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º, –Ω–æ –º–æ–∂–µ–º –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", e.message);
  }

  // ‚Äî‚Äî‚Äî EJS –°–¢–†–ê–ù–ò–¶–ê –°–ü–ê–°–ò–ë–û ‚Äî‚Äî‚Äî
  res.render("ok", { name: req.body.name, phone: req.body.phone });
});

module.exports = router;
